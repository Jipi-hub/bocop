<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classNLP" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>NLP</compoundname>
    <derivedcompoundref refid="classdOCP" prot="public" virt="non-virtual">dOCP</derivedcompoundref>
    <includes refid="NLP_8h" local="no">NLP.h</includes>
      <sectiondef kind="user-defined">
      <header>Functions and derivatives for the NLP solver</header>
      <memberdef kind="function" id="classNLP_1accc30c854eca5e3e5d3924156c907090" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::evalObjective</definition>
        <argsstring>(const double *variables, double &amp;objective)=0</argsstring>
        <name>evalObjective</name>
        <reimplementedby refid="classdOCPCppAD_1a34aebc84922bd6a08b7bcda83e11f16e">evalObjective</reimplementedby>
        <param>
          <type>const double *</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>objective</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Objective function for the nonlinear optimization problem </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a3fb766d26ae7bb80b52bc53a0ba875b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::evalConstraints</definition>
        <argsstring>(const double *variables, double *constraints)=0</argsstring>
        <name>evalConstraints</name>
        <reimplementedby refid="classdOCPCppAD_1acc1921100fe4b9a5d58c7bc95db2d80e">evalConstraints</reimplementedby>
        <param>
          <type>const double *</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constraints for the nonlinear problem. Equality constraints are handled by setting equal values for lower and upper bound. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1aacdce4e919dd809afb30cbfd17e87634" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::evalLagrangian</definition>
        <argsstring>(const double *primal_dual_variables, double &amp;lagrangian)=0</argsstring>
        <name>evalLagrangian</name>
        <reimplementedby refid="classdOCPCppAD_1a6910e9653f6d83ff0b8ecc1c85d46c2b">evalLagrangian</reimplementedby>
        <param>
          <type>const double *</type>
          <declname>primal_dual_variables</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>lagrangian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lagrangian <formula id="1">$L(X,\lambda) = F(X) + \lambda . C(X)$</formula>. This function is not called directly but its Hessian is required by the <ref refid="classNLP" kindref="compound">NLP</ref> solver. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a193e829428b575b3ef0a6edcee7009b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::evalObjectiveGradient</definition>
        <argsstring>(const double *variables, double *grad_objective)=0</argsstring>
        <name>evalObjectiveGradient</name>
        <reimplementedby refid="classdOCPCppAD_1aaf232b918566ee7a5d2ca790e8eb2a58">evalObjectiveGradient</reimplementedby>
        <param>
          <type>const double *</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>grad_objective</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gradient of the objective, computed by automatic differentiation (CppAD) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1abf5dcf13856dd753f39030d0ae271ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::evalConstraintsJacobian</definition>
        <argsstring>(const double *variables, double *jac_constraints)=0</argsstring>
        <name>evalConstraintsJacobian</name>
        <reimplementedby refid="classdOCPCppAD_1a707fab3c603d799894fcd7fb0c9e84a6">evalConstraintsJacobian</reimplementedby>
        <param>
          <type>const double *</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>jac_constraints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Jacobian of the constraints, computed by automatic differentiation (CppAD) in sparse format. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a11fb6373e50dad8e0134876f689135e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::evalLagrangianHessian</definition>
        <argsstring>(const double *variables, double obj_factor, const double *lambda, double *lag_hessian)=0</argsstring>
        <name>evalLagrangianHessian</name>
        <reimplementedby refid="classdOCPCppAD_1a6f6db476a0a17400828204cb1453a721">evalLagrangianHessian</reimplementedby>
        <param>
          <type>const double *</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>double</type>
          <declname>obj_factor</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lag_hessian</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hessian of the Lagrangian, computed by automatic differentiation (CppAD) in sparse format. Note: currently Hessian is computed fully ie for both primal and dual variables, while only the derivatives wrt X are used. Todo: use cppad DYNAMIC type for the dual variables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classNLP_1a0a1dd711bd99d7a66b61c72d11630cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual NLP::~NLP</definition>
        <argsstring>(void)=default</argsstring>
        <name>~NLP</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a41c57c28509ed3e4e688a618d663a62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NLP::initialize</definition>
        <argsstring>(void)=0</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classdOCPCppAD_1a06d705d061ab0e733e7b42093dc6c5c0">initialize</reimplementedby>
        <reimplementedby refid="classdOCP_1aeb79cbe5d8d7f02108af1824889612ad">initialize</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1af6ba3744fb5c97e94c9e818d579329be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string NLP::solutionFile</definition>
        <argsstring>(void) const =0</argsstring>
        <name>solutionFile</name>
        <reimplementedby refid="classdOCP_1a27a57a8b3e38c72fa1f106ed9286cc7b">solutionFile</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1ac2183089c3d4d7f73c5a5eec0c72b52d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NLP::setSolutionFile</definition>
        <argsstring>(const std::string solFile)=0</argsstring>
        <name>setSolutionFile</name>
        <reimplementedby refid="classdOCP_1a68cd456edbb53a4c0bf0bcc7c62f3500">setSolutionFile</reimplementedby>
        <param>
          <type>const std::string</type>
          <declname>solFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a16eeab6d375ce22c62731b5ddd49f6a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void NLP::writeSolution</definition>
        <argsstring>(const int status, const int iter, const double objective, const double constraints_viol, const double *variables, const double *multipliers, const double *constraints)=0</argsstring>
        <name>writeSolution</name>
        <reimplementedby refid="classdOCP_1ab91a553f7d62e1db2062882277750fa3">writeSolution</reimplementedby>
        <param>
          <type>const int</type>
          <declname>status</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>objective</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>constraints_viol</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>variables</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>multipliers</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1aa3615b1ef4b86b180348188b4fc53bf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t NLP::variablesSize</definition>
        <argsstring>(void) const =0</argsstring>
        <name>variablesSize</name>
        <reimplementedby refid="classdOCP_1a288727523c41ea99a8dd83d87e5a5ac5">variablesSize</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a7f28a342578c1a7991cc56e9aeebf698" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t NLP::constraintsSize</definition>
        <argsstring>(void) const =0</argsstring>
        <name>constraintsSize</name>
        <reimplementedby refid="classdOCP_1ac49cf792ff00da0f89f0299686d780c5">constraintsSize</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1ac18c51f4b215b9d9a0133cff20301ba0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; NLP::startingPoint</definition>
        <argsstring>(void) const =0</argsstring>
        <name>startingPoint</name>
        <reimplementedby refid="classdOCP_1a21717e4e3dceae7db4f2e91c763f12ce">startingPoint</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1ad7684e29770fe5bf1691c68ae0cbbdb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; NLP::variablesLowerBounds</definition>
        <argsstring>(void) const =0</argsstring>
        <name>variablesLowerBounds</name>
        <reimplementedby refid="classdOCP_1a95ed8d25a72dcfb9d740c9dac78071cc">variablesLowerBounds</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1af78b52b7a7d93e4f2c07c9c44ac2088f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; NLP::variablesUpperBounds</definition>
        <argsstring>(void) const =0</argsstring>
        <name>variablesUpperBounds</name>
        <reimplementedby refid="classdOCP_1ac1bb98dc8fbe78ff860f0ca24a47e52b">variablesUpperBounds</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1ad31449accbda173919415bc8c7e1d50e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; NLP::constraintsLowerBounds</definition>
        <argsstring>(void) const =0</argsstring>
        <name>constraintsLowerBounds</name>
        <reimplementedby refid="classdOCP_1a27221c0c62f1aed2d79d15b64525bcaf">constraintsLowerBounds</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a46e50ed4fd827fc35cb4650d3594a0c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; NLP::constraintsUpperBounds</definition>
        <argsstring>(void) const =0</argsstring>
        <name>constraintsUpperBounds</name>
        <reimplementedby refid="classdOCP_1a83514f90afb125f54728d25ddf0d92d6">constraintsUpperBounds</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1ac5d6174373e7c916ad2fb90ca0a1ae4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t NLP::jacobianNonZeroEntries</definition>
        <argsstring>(void) const =0</argsstring>
        <name>jacobianNonZeroEntries</name>
        <reimplementedby refid="classdOCPCppAD_1ab4e3a2819bd3296690f7a822ab103715">jacobianNonZeroEntries</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1af258447020822eee584c270e768ecee7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::size_t *</type>
        <definition>virtual const std::size_t* NLP::jacobianRowIndices</definition>
        <argsstring>(void) const =0</argsstring>
        <name>jacobianRowIndices</name>
        <reimplementedby refid="classdOCPCppAD_1a27f444860d9b7ebf0949d4d1a0530d2b">jacobianRowIndices</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a4a20391b3cef8b5c4b9c465d54e6c29f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::size_t *</type>
        <definition>virtual const std::size_t* NLP::jacobianColIndices</definition>
        <argsstring>(void) const =0</argsstring>
        <name>jacobianColIndices</name>
        <reimplementedby refid="classdOCPCppAD_1a220c19e5ec9794d96f6541fe29eaa251">jacobianColIndices</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a1313b08fe19bd0454b968c5c7d1ba9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::setConstraintsJacobianSparsityPattern</definition>
        <argsstring>(int *row_indices, int *col_indices, int jacobian_nonzero)=0</argsstring>
        <name>setConstraintsJacobianSparsityPattern</name>
        <reimplementedby refid="classdOCPCppAD_1a7a2449ecb51f28f2b53f6707ca4fbf9e">setConstraintsJacobianSparsityPattern</reimplementedby>
        <param>
          <type>int *</type>
          <declname>row_indices</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>col_indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>jacobian_nonzero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1aa93c92d2837660540540d8e8d12fae75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::size_t</type>
        <definition>virtual std::size_t NLP::hessianNonZeroEntries</definition>
        <argsstring>(void) const =0</argsstring>
        <name>hessianNonZeroEntries</name>
        <reimplementedby refid="classdOCPCppAD_1a56e0dd0ba7a6bb14a5a23272b33266d9">hessianNonZeroEntries</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a6ef75d9960953802e97b59bf2df10966" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::size_t *</type>
        <definition>virtual const std::size_t* NLP::hessianRowIndices</definition>
        <argsstring>(void) const =0</argsstring>
        <name>hessianRowIndices</name>
        <reimplementedby refid="classdOCPCppAD_1a357ada85d6601ea93b0a7e179b76627e">hessianRowIndices</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a508f6d65522703fb6575b61d92744038" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::size_t *</type>
        <definition>virtual const std::size_t* NLP::hessianColIndices</definition>
        <argsstring>(void) const =0</argsstring>
        <name>hessianColIndices</name>
        <reimplementedby refid="classdOCPCppAD_1a8f88ee9a6a96c57a6734ca6bc7580e97">hessianColIndices</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classNLP_1a78b9ec832522a3c514154a5f5877dcfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool NLP::setLagrangianHessianSparsityPattern</definition>
        <argsstring>(int *row_indices, int *col_indices, int hessian_nonzero)=0</argsstring>
        <name>setLagrangianHessianSparsityPattern</name>
        <reimplementedby refid="classdOCPCppAD_1afb5845e48ae781f76d86eb6aa82393b6">setLagrangianHessianSparsityPattern</reimplementedby>
        <param>
          <type>int *</type>
          <declname>row_indices</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>col_indices</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hessian_nonzero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="78" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classNLP" kindref="compound">NLP</ref> defines a nonlinear programming problem of the general form <formula id="0">\[ \begin{array}{l} Min\ F(X)\\ G_L \le G(X) \le G_U \end{array} \]</formula> It provides functions for objective F and constraints C (and Lagrangian L) with their derivatives gradient_F, jacobian_G and hessian_L as well as some utility functions (set bounds, starting point,...) </para>    </briefdescription>
    <detaileddescription>
<para><hruler/>
</para><para>Note: the class is virtual and its functions are typically overriden in <ref refid="classdOCP" kindref="compound">dOCP</ref> and <ref refid="classdOCPCppAD" kindref="compound">dOCPCppAD</ref> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="69">
        <label>NLP</label>
        <link refid="classNLP"/>
      </node>
      <node id="70">
        <label>dOCP</label>
        <link refid="classdOCP"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>dOCPCppAD</label>
        <link refid="classdOCPCppAD"/>
        <childnode refid="70" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" line="26" column="1" bodyfile="/home/martinon/bocop/bocop3/bocop/src/NLP/NLP.h" bodystart="25" bodyend="79"/>
    <listofallmembers>
      <member refid="classNLP_1ad31449accbda173919415bc8c7e1d50e" prot="public" virt="pure-virtual"><scope>NLP</scope><name>constraintsLowerBounds</name></member>
      <member refid="classNLP_1a7f28a342578c1a7991cc56e9aeebf698" prot="public" virt="pure-virtual"><scope>NLP</scope><name>constraintsSize</name></member>
      <member refid="classNLP_1a46e50ed4fd827fc35cb4650d3594a0c2" prot="public" virt="pure-virtual"><scope>NLP</scope><name>constraintsUpperBounds</name></member>
      <member refid="classNLP_1a3fb766d26ae7bb80b52bc53a0ba875b0" prot="public" virt="pure-virtual"><scope>NLP</scope><name>evalConstraints</name></member>
      <member refid="classNLP_1abf5dcf13856dd753f39030d0ae271ced" prot="public" virt="pure-virtual"><scope>NLP</scope><name>evalConstraintsJacobian</name></member>
      <member refid="classNLP_1aacdce4e919dd809afb30cbfd17e87634" prot="public" virt="pure-virtual"><scope>NLP</scope><name>evalLagrangian</name></member>
      <member refid="classNLP_1a11fb6373e50dad8e0134876f689135e8" prot="public" virt="pure-virtual"><scope>NLP</scope><name>evalLagrangianHessian</name></member>
      <member refid="classNLP_1accc30c854eca5e3e5d3924156c907090" prot="public" virt="pure-virtual"><scope>NLP</scope><name>evalObjective</name></member>
      <member refid="classNLP_1a193e829428b575b3ef0a6edcee7009b2" prot="public" virt="pure-virtual"><scope>NLP</scope><name>evalObjectiveGradient</name></member>
      <member refid="classNLP_1a508f6d65522703fb6575b61d92744038" prot="public" virt="pure-virtual"><scope>NLP</scope><name>hessianColIndices</name></member>
      <member refid="classNLP_1aa93c92d2837660540540d8e8d12fae75" prot="public" virt="pure-virtual"><scope>NLP</scope><name>hessianNonZeroEntries</name></member>
      <member refid="classNLP_1a6ef75d9960953802e97b59bf2df10966" prot="public" virt="pure-virtual"><scope>NLP</scope><name>hessianRowIndices</name></member>
      <member refid="classNLP_1a41c57c28509ed3e4e688a618d663a62e" prot="public" virt="pure-virtual"><scope>NLP</scope><name>initialize</name></member>
      <member refid="classNLP_1a4a20391b3cef8b5c4b9c465d54e6c29f" prot="public" virt="pure-virtual"><scope>NLP</scope><name>jacobianColIndices</name></member>
      <member refid="classNLP_1ac5d6174373e7c916ad2fb90ca0a1ae4d" prot="public" virt="pure-virtual"><scope>NLP</scope><name>jacobianNonZeroEntries</name></member>
      <member refid="classNLP_1af258447020822eee584c270e768ecee7" prot="public" virt="pure-virtual"><scope>NLP</scope><name>jacobianRowIndices</name></member>
      <member refid="classNLP_1a1313b08fe19bd0454b968c5c7d1ba9bf" prot="public" virt="pure-virtual"><scope>NLP</scope><name>setConstraintsJacobianSparsityPattern</name></member>
      <member refid="classNLP_1a78b9ec832522a3c514154a5f5877dcfb" prot="public" virt="pure-virtual"><scope>NLP</scope><name>setLagrangianHessianSparsityPattern</name></member>
      <member refid="classNLP_1ac2183089c3d4d7f73c5a5eec0c72b52d" prot="public" virt="pure-virtual"><scope>NLP</scope><name>setSolutionFile</name></member>
      <member refid="classNLP_1af6ba3744fb5c97e94c9e818d579329be" prot="public" virt="pure-virtual"><scope>NLP</scope><name>solutionFile</name></member>
      <member refid="classNLP_1ac18c51f4b215b9d9a0133cff20301ba0" prot="public" virt="pure-virtual"><scope>NLP</scope><name>startingPoint</name></member>
      <member refid="classNLP_1ad7684e29770fe5bf1691c68ae0cbbdb0" prot="public" virt="pure-virtual"><scope>NLP</scope><name>variablesLowerBounds</name></member>
      <member refid="classNLP_1aa3615b1ef4b86b180348188b4fc53bf7" prot="public" virt="pure-virtual"><scope>NLP</scope><name>variablesSize</name></member>
      <member refid="classNLP_1af78b52b7a7d93e4f2c07c9c44ac2088f" prot="public" virt="pure-virtual"><scope>NLP</scope><name>variablesUpperBounds</name></member>
      <member refid="classNLP_1a16eeab6d375ce22c62731b5ddd49f6a7" prot="public" virt="pure-virtual"><scope>NLP</scope><name>writeSolution</name></member>
      <member refid="classNLP_1a0a1dd711bd99d7a66b61c72d11630cde" prot="public" virt="virtual"><scope>NLP</scope><name>~NLP</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
