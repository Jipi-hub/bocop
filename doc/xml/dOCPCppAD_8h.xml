<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="dOCPCppAD_8h" kind="file" language="C++">
    <compoundname>dOCPCppAD.h</compoundname>
    <includes local="no">cppad/cppad.hpp</includes>
    <includes refid="dOCP_8h" local="no">dOCP.h</includes>
    <includedby refid="main_8cpp" local="no">/home/martinon/bocop/bocop3/bocop/src/main.cpp</includedby>
    <includedby refid="dOCPCppAD_8cpp" local="no">/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.cpp</includedby>
    <incdepgraph>
      <node id="36">
        <label>iterator</label>
      </node>
      <node id="41">
        <label>dODE.h</label>
        <link refid="dODE_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>tools_interpolation.h</label>
        <link refid="tools__interpolation_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h</label>
        <link refid="dOCPCppAD.h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>cppad/cppad.hpp</label>
      </node>
      <node id="37">
        <label>stdexcept</label>
      </node>
      <node id="29">
        <label>string</label>
      </node>
      <node id="40">
        <label>map</label>
      </node>
      <node id="26">
        <label>dOCP.h</label>
        <link refid="dOCP_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>fstream</label>
      </node>
      <node id="30">
        <label>tools.h</label>
        <link refid="tools_8h_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>bufferAdaptor.h</label>
        <link refid="bufferAdaptor_8h_source"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>vector</label>
      </node>
      <node id="33">
        <label>sstream</label>
      </node>
      <node id="27">
        <label>NLP.h</label>
        <link refid="NLP_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>dControl.h</label>
        <link refid="dControl_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>cstdlib</label>
      </node>
      <node id="42">
        <label>dState.h</label>
        <link refid="dState_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>cstddef</label>
      </node>
      <node id="44">
        <label>solution.h</label>
        <link refid="solution_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>OCP.h</label>
        <link refid="OCP_8h_source"/>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classdOCPCppAD" prot="public">dOCPCppAD</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dOCPCppAD_8h_1a1f51f6beecdfc4352653f0ef730e01e6" prot="public" static="no">
        <type>CppAD::AD&lt; double &gt;</type>
        <definition>using double_ad =  CppAD::AD&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>double_ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" line="7" column="1" bodyfile="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dOCPCppAD_8h_1ad003d42c09200ef0f8fc800ee72b8174" prot="public" static="no">
        <type>CppAD::ADFun&lt; double &gt;</type>
        <definition>using fun_ad =  CppAD::ADFun&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>fun_ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" line="8" column="1" bodyfile="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dOCPCppAD_8h_1a1714538cf1b76f7e0be2124058e6410d" prot="public" static="no">
        <type>CppAD::vector&lt; T &gt;</type>
        <definition>using vector_ad =  CppAD::vector&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>vector_ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" line="9" column="1" bodyfile="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dOCPCppAD_8h_1a0ce8b700ab6f44c5dcc3f993ffdc6d54" prot="public" static="no">
        <type>CppAD::sparse_jacobian_work</type>
        <definition>using sparse_jac_work =  CppAD::sparse_jacobian_work</definition>
        <argsstring></argsstring>
        <name>sparse_jac_work</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" line="10" column="1" bodyfile="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dOCPCppAD_8h_1ad5d7353eee910ca3bf01a40573f274ba" prot="public" static="no">
        <type>CppAD::sparse_hessian_work</type>
        <definition>using sparse_hess_work =  CppAD::sparse_hessian_work</definition>
        <argsstring></argsstring>
        <name>sparse_hess_work</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" line="11" column="1" bodyfile="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>dOCPCppAD.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cppad/cppad.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>double_ad<sp/>=<sp/>CppAD::AD&lt;double&gt;;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>fun_ad<sp/>=<sp/>CppAD::ADFun&lt;double&gt;;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vector_ad<sp/>=<sp/>CppAD::vector&lt;T&gt;;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>sparse_jac_work<sp/>=<sp/>CppAD::sparse_jacobian_work;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>sparse_hess_work<sp/>=<sp/>CppAD::sparse_hessian_work;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dOCP.h&gt;</highlight></codeline>
<codeline lineno="25" refid="classdOCPCppAD" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdOCPCppAD" kindref="compound">dOCPCppAD</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdOCP" kindref="compound">dOCP</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><ref refid="classdOCPCppAD" kindref="compound">dOCPCppAD</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>~<ref refid="classdOCPCppAD" kindref="compound">dOCPCppAD</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialize(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>overrides<sp/>the<sp/>one<sp/>from<sp/>NLP<sp/>or<sp/>dOCP<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdOCPCppAD_1a34aebc84922bd6a08b7bcda83e11f16e" kindref="member">evalObjective</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*variables,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>objective)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdOCPCppAD_1acc1921100fe4b9a5d58c7bc95db2d80e" kindref="member">evalConstraints</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*variables,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*constraints)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdOCPCppAD_1a6910e9653f6d83ff0b8ecc1c85d46c2b" kindref="member">evalLagrangian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*primal_dual_variables,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>lagrangian)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdOCPCppAD_1aaf232b918566ee7a5d2ca790e8eb2a58" kindref="member">evalObjectiveGradient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*variables,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*grad_objective)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdOCPCppAD_1a707fab3c603d799894fcd7fb0c9e84a6" kindref="member">evalConstraintsJacobian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*variables,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*jac_constraints)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdOCPCppAD_1a6f6db476a0a17400828204cb1453a721" kindref="member">evalLagrangianHessian</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*variables,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>obj_factor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lambda,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lag_hessian)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>std::size_t<sp/>jacobianNonZeroEntries(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row_jac.size();<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>*jacobianRowIndices(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row_jac.data();<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>*jacobianColIndices(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col_jac.data();<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setConstraintsJacobianSparsityPattern(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*row_indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*col_indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jacobian_nonzero)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>std::size_t<sp/>hessianNonZeroEntries(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row_hess.size();<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>*hessianRowIndices(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row_hess.data();<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>*hessianColIndices(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col_hess.data();<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>setLagrangianHessianSparsityPattern(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*row_indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*col_indices,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hessian_nonzero)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>auxiliary<sp/>functions<sp/>for<sp/>derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>evalObjective_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Variable&amp;<sp/>v,<sp/>Variable&amp;<sp/>o);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>evalConstraints_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Variable&amp;<sp/>v,<sp/>Variable&amp;<sp/>g);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>evalLagrangian_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Variable&amp;<sp/>primal_dual_v,<sp/>Variable&amp;<sp/>lag);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeObjectiveGradient(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeConstraintsJacobian(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initializeLagrangianHessian(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retape<sp/>=<sp/>0:<sp/>reuse<sp/>tapes<sp/>for<sp/>each<sp/>evaluation<sp/>(standard<sp/>case:<sp/>no<sp/>branching<sp/>wrt<sp/>Variable<sp/>values)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>retape<sp/>=<sp/>1;<sp/>reuse<sp/>sparsity<sp/>pattern<sp/>but<sp/>recompute<sp/>tape<sp/>for<sp/>each<sp/>evaluation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required<sp/>for<sp/>instance<sp/>to<sp/>have<sp/>proper<sp/>derivatives<sp/>when<sp/>branching<sp/>eg<sp/>interpolation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(retape<sp/>=<sp/>2;<sp/>recompute<sp/>tape<sp/>and<sp/>sparsity<sp/>pattern<sp/>at<sp/>each<sp/>evaluation<sp/>?<sp/>NB<sp/>probably<sp/>need<sp/>to<sp/>signal<sp/>ipopt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ad_retape;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>std::vector&lt;double_ad&gt;<sp/>x_ad;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gradient<sp/>objective</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>std::vector&lt;double_ad&gt;<sp/>objvalue_ad;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>fun_ad<sp/>f_obj;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>grad;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constraints<sp/>jacobian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>std::vector&lt;double_ad&gt;<sp/>g_ad;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>fun_ad<sp/>g_con;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>vector_ad&lt;std::set&lt;size_t&gt;&gt;<sp/>pattern_jac;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>vector_ad&lt;size_t&gt;<sp/>col_jac,<sp/>row_jac;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>sparse_jac_work<sp/>work_jac;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>x2;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>jac;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lagrangian<sp/>hessian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::vector&lt;double_ad&gt;<sp/>lagvalue_ad;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>fun_ad<sp/>h_lag;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>vector_ad&lt;std::set&lt;std::size_t&gt;<sp/>&gt;<sp/>pattern_hess;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>vector_ad&lt;std::size_t&gt;<sp/>col_hess,<sp/>row_hess;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>sparse_hess_work<sp/>work_hess;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>std::vector&lt;double&gt;<sp/>xlf2,<sp/>hess;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+++<sp/>add<sp/>here<sp/>derivatives<sp/>of<sp/>dynamics<sp/>for<sp/>python<sp/>wrapping<sp/>in<sp/>nutopy.<sp/>is<sp/>it<sp/>even<sp/>possible<sp/>to<sp/>wrap<sp/>without<sp/>the<sp/>explicit<sp/>code<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dOCPCppAD::evalObjective_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Variable&amp;<sp/>v,<sp/>Variable&amp;<sp/>o)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;dOCPCppAD::evalObjective_t&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initial_time<sp/>=<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;initialTime();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>final_time<sp/>=<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;finalTime();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>initial_state<sp/>=<sp/>stateAtStep(v,<sp/>0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>final_state<sp/>=<sp/>stateAtStep(v,<sp/>discretisationSteps());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parameters<sp/>=<sp/>getParameters(v);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constants<sp/>=<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;getConstants();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;<ref refid="classOCP_1ac20ec9b6662ce587ae0028e17c4d9fec" kindref="member">finalCost</ref>(initial_time,<sp/>final_time,<sp/>initial_state.data(),<sp/>final_state.data(),<sp/>parameters.data(),<sp/>constants.data(),<sp/>o[0]);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>o[0]<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Layout<sp/>of<sp/>C:<sp/>{boundarycond<sp/>[dynstep<sp/>(dynstage...dynstage)<sp/>pathcond]<sp/>...<sp/>[dynstep<sp/>(dynstage...dynstage)<sp/>pathcond]<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>+++<sp/>NB.<sp/>does<sp/>this<sp/>mean<sp/>that<sp/>the<sp/>path<sp/>constraint<sp/>is<sp/>not<sp/>enforced<sp/>at<sp/>final<sp/>time<sp/>?!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dOCPCppAD::evalConstraints_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Variable&amp;<sp/>v,<sp/>Variable&amp;<sp/>g)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;dOCPCppAD::evalConstraints_t&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;variablesSize();<sp/>i++)</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>v[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable::value_type;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initial_time<sp/>=<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;initialTime();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>final_time<sp/>=<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;finalTime();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>initial_state<sp/>=<sp/>stateAtStep(v,<sp/>0);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>final_state<sp/>=<sp/>stateAtStep(v,<sp/>discretisationSteps());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parameters<sp/>=<sp/>getParameters(v);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>constants<sp/>=<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;getConstants();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+++<sp/>NB<sp/>for<sp/>more<sp/>genericity<sp/>use<sp/>aux<sp/>functions<sp/>fillDynamicsConstraints,<sp/>fillPathConstraints<sp/>etc<sp/>in<sp/>dODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>boundary<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>std::size_t<sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>std::vector&lt;value_t&gt;<sp/>boundary_conditions(<ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;boundaryConditionsSize());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;<ref refid="classOCP_1a5361cfcf3f0b612a2a22478f7da1f633" kindref="member">boundaryConditions</ref>(initial_time,<sp/>final_time,<sp/>initial_state.data(),<sp/>final_state.data(),<sp/>parameters.data(),<sp/>constants.data(),<sp/>boundary_conditions.data());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;boundaryConditionsSize();<sp/>++i)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>g[index++]<sp/>=<sp/>boundary_conditions[i];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>loop<sp/>over<sp/>steps:<sp/>discretized<sp/>dynamics<sp/>+<sp/>path<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>l<sp/>=<sp/>0;<sp/>l<sp/>&lt;<sp/>discretisationSteps();<sp/>++l)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.1<sp/>dynamics<sp/>constraint<sp/>at<sp/>time<sp/>step:<sp/>y_l<sp/>+<sp/>h<sp/>sum(b_j*k_j)<sp/>-<sp/>y_{l+1}<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>timeStep();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>step_state<sp/>=<sp/>stateAtStep(v,<sp/>l);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next_step_state<sp/>=<sp/>stateAtStep(v,<sp/>l+1);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;stateSize();<sp/>++i)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_t<sp/>sum_bk_i<sp/>=<sp/>0e0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>RKStages();<sp/>++j)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_bk_i<sp/>+=<sp/>rk-&gt;butcherB()[j]<sp/>*<sp/>kComponent(v,<sp/>l,<sp/>j,<sp/>i);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g[index++]<sp/>=<sp/>step_state[i]<sp/>+<sp/>h<sp/>*<sp/>sum_bk_i<sp/>-<sp/>next_step_state[i];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>try<sp/>to<sp/>be<sp/>consistent<sp/>with<sp/>multipliers<sp/>for<sp/>initial<sp/>conditions<sp/>x=x0...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g[index++]<sp/>=<sp/>next_step_state[i]<sp/>-<sp/>(step_state[i]<sp/>+<sp/>h<sp/>*<sp/>sum_bk_i);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.2<sp/>loop<sp/>on<sp/>stages<sp/>for<sp/>k_j<sp/>equations:<sp/>f(...)<sp/>-<sp/>k_j<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>RKStages();<sp/>++j)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stage_time<sp/>=<sp/>timeAtStage(l,<sp/>j);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stage_state<sp/>=<sp/>stateAtStage(v,<sp/>l,<sp/>j);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stage_control<sp/>=<sp/>controlAtStage(v,<sp/>l,<sp/>j);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;value_t&gt;<sp/>state_dynamics(<ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;stateSize());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;<ref refid="classOCP_1a0e25283d3a734841955d12356837d042" kindref="member">dynamics</ref>(stage_time,<sp/>stage_state.data(),<sp/>stage_control.data(),<sp/>parameters.data(),<sp/>constants.data(),<sp/>state_dynamics.data());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;stateSize();<sp/>++i)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g[index++]<sp/>=<sp/>state_dynamics[i]<sp/>-<sp/>kComponent(v,<sp/>l,<sp/>j,<sp/>i);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.3<sp/>path<sp/>constraints<sp/>(on<sp/>step<sp/>with<sp/>average<sp/>control)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>step_time<sp/>=<sp/>timeAtStep(l);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>step_control<sp/>=<sp/>controlAtStep(v,<sp/>l);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;value_t&gt;<sp/>path_constraints(<ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;pathConstraintsSize());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;<ref refid="classOCP_1a52083e45d17e7f54eb3ccdb20858b541" kindref="member">pathConstraints</ref>(step_time,<sp/>step_state.data(),<sp/>step_control.data(),<sp/>parameters.data(),<sp/>constants.data(),<sp/>path_constraints.data());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdOCP_1af47fb45b1f0c48e707cbde8291a604b8" kindref="member">ocp</ref>-&gt;pathConstraintsSize();<sp/>++i)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g[index++]<sp/>=<sp/>path_constraints[i];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>!=<sp/>constraintsSize())</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;dOCPCppAD::evalConstraints_t<sp/>&gt;&gt;&gt;<sp/>constraints<sp/>last<sp/>index<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>vs<sp/>total<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>constraintsSize()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;constraintsSize();<sp/>i++)</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>g[i]<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;;</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="204"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable&gt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dOCPCppAD::evalLagrangian_t(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Variable&amp;<sp/>primal_dual_v,<sp/>Variable&amp;<sp/>lag)</highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Variable::value_type;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>array_t<sp/>=<sp/>bcp::buffer_adaptor&lt;value_t&gt;;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>variablesSize();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>constraintsSize();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">value_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(primal_dual_v.data());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>array_t<sp/>variables(n,<sp/>ptr);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>array_t<sp/>multipliers(m,<sp/>ptr<sp/>+<sp/>n);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>array_t<sp/>lagrangian(lag.size(),<sp/>lag.data());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>this-&gt;evalObjective_t(variables,<sp/>lagrangian);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;value_t&gt;<sp/>constraints(m);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>array_t<sp/>g(m,<sp/>constraints.data());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>this-&gt;evalConstraints_t(variables,<sp/>g);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>++i)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lag[0]<sp/>+=<sp/>multipliers[i]<sp/>*<sp/>constraints[i];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dOCPCppAD.h<sp/>ends<sp/>here</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/martinon/bocop/bocop3/bocop/src/AD/dOCPCppAD.h"/>
  </compounddef>
</doxygen>
